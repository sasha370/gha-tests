name: Flows

on:
  workflow_dispatch:
    inputs:
      sha:
        description: Git reference commit
        type: string
        required: true

  workflow_call:
    inputs:
      sha:
        description: Git reference commit
        type: string
        required: true
      is_workflow_call:
        description: 'Is workflow call?'
        type: string
        required: false
        default: 'true'

jobs:
  flows:
    name: ${{ matrix.mode }}
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    env:
      STATUS_CHECK_NAME: Flows test / ${{ matrix.mode }}
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    strategy:
      matrix:
        mode: [ explore, test ]
    steps:
      - name: JSON event
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github.event) }}
      - name: JSON inputs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(inputs) }}
      - name: JSON github
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github) }}

      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })

      - name: Checkout
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so lerna command --since origin/master can work properly
          fetch-depth: 0
          ref: ${{ inputs.sha || github.ref }}

      - name: Run flows ${{ matrix.mode }}
        run: |
          echo "${{ needs.check_necessity.outputs.conclusion }}"
          echo "Done"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })
