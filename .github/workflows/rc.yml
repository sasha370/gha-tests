name: Release candidate

on:
 push:
   branches: [ master ]
 workflow_dispatch: 

jobs: 
  zero_job:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Success job
        shell: bash
        run: |
          echo 'Green'
  
  first_job: 
    runs-on: ubuntu-latest
    needs: [zero_job]
    if: ${{ !cancelled()}}
    steps:
      - name: Success job
        shell: bash
        run: |
          echo 'Green'
          
  second_job: 
    runs-on: ubuntu-latest
    steps:
      - name: Failed job
        shell: bash
        run: |
          exit 0
          
  third_job: 
    runs-on: ubuntu-latest
    steps:
      - name: Skipped job
        shell: bash
        run: |
          echo 'Green'
 
  get_results: 
    runs-on: ubuntu-latest
    needs: [first_job, second_job, third_job]
    if: ${{ !cancelled() }}
    steps:          
      - name: JSON needs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(needs) }}
    
      - name: Prepare data
        id: prepare_status
        shell: bash
        run: |
          echo ${{ join(needs.*.result, ',') }}
          echo ${{ !contains(needs.*.result, 'failure') }}
          status=${{ contains(join(needs.*.result, ','), 'failure') }}
          echo "Status: $status"
          echo "rc-status=$status" >> $GITHUB_ENV
    
          if [ $status == 'true' ]; then
             echo "emoji=:redex:" >> $GITHUB_OUTPUT
          else 
            echo "emoji=:green_heart:" >> $GITHUB_OUTPUT
          fi

    
      - name: Report failure to Slack
        if: ${{ contains(join(needs.*.result, ','), 'failure') }}
        shell: bash 
        run: |
          echo "RC <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}> with ${GITHUB_SHA::7} is :redex:."
          echo "Login ${{ github.event.pusher.name }}"

      - name: Report success to Slack
        if: ${{ !contains(join(needs.*.result, ','), 'failure') }}
        shell: bash 
        run: |
          echo "Login ${{ github.event.pusher.name }}"
          echo "RC <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}> with <https://github.com/${{github.repository}}/commit/${GITHUB_SHA}|${GITHUB_SHA::7}> (PR # by ${{github.event.pusher.name}}) is ${{env.emoji}}."
          echo "RC <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}> with ${GITHUB_SHA::7} is :green_heart:."

      - name: Report success to Slack
 
        shell: bash 
        run: |
          echo "RC <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{github.run_id}}> with <https://github.com/${{github.repository}}/commit/${GITHUB_SHA}|${GITHUB_SHA::7}> (PR # by ${{github.event.pusher.name}}) is ${{steps.prepare_status.outputs.emoji}}."



  
  context:
    runs-on: ubuntu-latest
    steps:
      - name: JSON github
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github) }}
      - name: JSON env
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(env) }}
      - name: JSON vars
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(vars) }}
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}
      - name: JSON steps
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(steps) }}
      - name: JSON runner
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(runner) }}
      - name: JSON secrets
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(secrets) }}
      - name: JSON needs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(needs) }}
      - name: JSON inputs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(inputs) }}
      - name: JSON event
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github.event) }}
