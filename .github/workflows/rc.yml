name: Release candidate

on:
 push:
   branches: [ master ]
 workflow_dispatch:

jobs:
  zero_job:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Success job
        shell: bash
        run: |
          echo 'Green'

  first_job:
    runs-on: ubuntu-latest
#     needs: [zero_job]
    if: ${{ !cancelled()}}
    steps:
      - name: Success job
        shell: bash
        run: |
          echo 'Green'

  second_job:
    runs-on: ubuntu-latest
    steps:
      - name: Failed job
        shell: bash
        run: |
          exit 1

  third_job:
    runs-on: ubuntu-latest
    steps:
      - name: Skipped job
        shell: bash
        run: |
          echo 'Green'

  get_results:
    runs-on: ubuntu-latest
    needs: [first_job, second_job, third_job]
    if: ${{ !cancelled() }}
    steps:
      - name: Prepare result status
        shell: bash
        id: prepare_status
        env:
          context: ${{ toJSON(needs) }}
        run: |
          echo $context | jq --color-output .
          echo "Merged by: ${{ github.event.commits[0].author.name }}"
#          echo "Commit id: ${{ github.event.commits[0].id }}"

          rc_failed=${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')}}
          echo "RC failed?: $rc_failed"

          if [ $rc_failed == 'true' ]; then
            echo "emoji=:redex:" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "emoji=:green_heart:" >> $GITHUB_OUTPUT
          fi

      - name: Post always
        if: always()
        shell: bash
        run: |
           echo "Summary: ${{steps.prepare_status.outputs.emoji}}"

  context:
    runs-on: ubuntu-latest
    steps:
      - name: JSON github
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github) }}
      - name: JSON env
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(env) }}
      - name: JSON vars
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(vars) }}
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}
      - name: JSON steps
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(steps) }}
      - name: JSON runner
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(runner) }}
      - name: JSON secrets
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(secrets) }}
      - name: JSON needs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(needs) }}
      - name: JSON inputs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(inputs) }}
      - name: JSON event
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github.event) }}
