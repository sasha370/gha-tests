name: Release candidate

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  flows-test:
    name: Flows test
    uses: ./.github/workflows/flow_specs.yml
    secrets: inherit
    with:
      sha: ${{ github.sha }}

  contracts:
    name: Contracts
    uses: ./.github/workflows/contracts.yml
    secrets: inherit
    with:
      sha: ${{ github.sha }}
      ref_name: ${{ github.ref_name }}

  get_results:
    runs-on: ubuntu-latest
    needs: [flows-test, contracts]
    if: ${{ !cancelled() }}
    steps:
      - name: Prepare result status
        shell: bash
        id: prepare_status
        env:
          context: ${{ toJSON(github.event) }}
        run: |
          echo $context | jq --color-output .
          echo "Merged by: ${{ github.event.head_commit.author.name }}"
          echo "PR: ${{ github.event.repository.pulls_url }}"

          

          rc_failed=${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')}}
          echo "RC failed?: $rc_failed"

          if [ $rc_failed == 'true' ]; then
            echo "emoji=:redex:" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "emoji=:green_heart:" >> $GITHUB_OUTPUT
          fi

      - name: Post always
        if: always()
        shell: bash
        run: |
           echo "Summary: ${{steps.prepare_status.outputs.emoji}}"

  context:
    runs-on: ubuntu-latest
    steps:
      - name: JSON github
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github) }}
      - name: JSON env
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(env) }}
      - name: JSON vars
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(vars) }}
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}
      - name: JSON steps
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(steps) }}
      - name: JSON runner
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(runner) }}
      - name: JSON secrets
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(secrets) }}
      - name: JSON needs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(needs) }}
      - name: JSON inputs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(inputs) }}
      - name: JSON event
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github.event) }}
