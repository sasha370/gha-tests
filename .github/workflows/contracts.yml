name: Contracts

on:
  workflow_dispatch:
    inputs:
      sha:
        description: Git reference commit.
        type: string
        required: true
      ref_name:
        description: Git branch name.
        type: string
        required: true
      contracts_set:
        description: Set of contract tests.
        type: string
        required: true

  workflow_call:
    inputs:
      sha:
        description: Git reference commit.
        type: string
        required: true
      ref_name:
        description: Git branch name.
        type: string
        required: true
      contracts_set:
        description: Set of contract tests.
        type: string
        required: false
        default: 'all'
      is_workflow_call:
        description: 'Is workflow call?'
        type: string
        required: false
        default: 'true'

jobs:
  consumer-contract-tests:
    name: Consumer
    runs-on: ubuntu-latest
    if: ${{ !cancelled() && 
          ( inputs.contracts_set == 'consumer' || inputs.contracts_set == 'all'  ) 
        }}
    env:
      STATUS_CHECK_NAME: Contracts / Consumer
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/

    steps:
      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}

      - name: Do something
        shell: bash
        run: |
          echo "Consumer contracts verification"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        if: always()
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })


  provider-contracts-graphql-gateway-verify:
    name: Provider graphql gateway
    runs-on: ubuntu-latest
    if: ${{ !cancelled() &&
          ( inputs.contracts_set == 'provider' || inputs.contracts_set == 'all'  )
          }}
    env:
      STATUS_CHECK_NAME: Provider / Platform GraphQL gateway
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/

    steps:
      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}

      - name: Do something
        shell: bash
        run: |
          echo "Provider GraphQL gateway contracts verification"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        if: always()
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })

  provider-contracts-platform-verify:
    name: Provider platform
    runs-on: ubuntu-latest
    if: ${{ !cancelled() &&
          ( inputs.contracts_set == 'provider' || inputs.contracts_set == 'all'  )
        }}
    env:
      STATUS_CHECK_NAME: Provider / Platform
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/

    steps:
      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}

      - name: Do something
        shell: bash
        run: |
          echo "Provider Platform contracts verification"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        if: always()
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })

  provider-contracts-platform-async-verify:
    name: Provider platform async
    runs-on: ubuntu-latest
    if: ${{ !cancelled() &&
          ( inputs.contracts_set == 'provider' || inputs.contracts_set == 'all' )
       }}
    env:
      STATUS_CHECK_NAME: Provider / Platform async
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/

    steps:
      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })

      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}

      - name: Do something
        shell: bash
        run: |
          exit 1
          echo "Provider Platform async contracts verification"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        if: always()
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })


  run-can-i-deploy-check:
    needs:
      - consumer-contract-tests
      - provider-contracts-graphql-gateway-verify
      - provider-contracts-platform-verify
      - provider-contracts-platform-async-verify
    if: ${{ !cancelled() && !contains(needs.*.result, 'failure') && inputs.contracts_set == 'all' }}
    name: Can-I-Deploy
    runs-on: ubuntu-latest
    env:
      STATUS_CHECK_NAME: Can-I-Deploy
      STATUS_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/

    steps:
      - name: Set status check - pending
        uses: actions/github-script@v6
        env:
          STATUS_STATE: pending
        with:
          script: |
            const { owner, repo } = context.issue;
            console.log(context);
            console.log(context.sha);
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })

      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}

      - name: Do something
        shell: bash
        run: |
          echo "Can-I-Deploy check"

      - name: Set status check - success / failure / error
        uses: actions/github-script@v6
        if: always()
        env:
          STATUS_STATE: ${{ job.status != 'cancelled' && job.status || 'error' }}
        with:
          script: |
            const { owner, repo } = context.issue;
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha: context.sha,
              context: process.env.STATUS_CHECK_NAME,
              state: process.env.STATUS_STATE,
              target_url: process.env.STATUS_TARGET_URL
            })
