name: Get context

on:
  issue_comment:
    types: [ created ]
jobs:
  run_platform_features:
    name: Trigger action and react on comment
    runs-on: ubuntu-latest
    if: >
      github.event.issue.pull_request &&
      contains(github.event.comment.body, 'get context')
    steps:
      - name: Print
        env :
          CONTENT : "${{ toJson(github.event.issue.pull_request) }}"
          CONTENT1 : "${{ toJson(github.event.issue) }}"
          CONTENT2 : "${{ toJson(github.event) }}"
          CONTENT3 : "${{ toJson(github.event.comment.body) }}"
          CONTENT4 : "${{ toJson(github.event.issue.number ) }}"

        run: |
          echo "Say Hello"
          echo $CONTENT
          echo $CONTENT1
          echo $CONTENT2
          echo $CONTENT3
          echo $CONTENT4
          echo $GITHUB_BASE_REF
          echo ${{ github.base_ref }}
          echo ${{ github.ref }}
          echo ${{ github.ref_name }}
          echo ${{ github.sha }}

      - id: prData1
        uses: actions/github-script@v4
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const { data: pr } = await github.pulls.get({ owner, repo, pull_number: number });
            if (pr.mergeable) {
              core.setOutput('ref', pr.merge_commit_sha)
            } else {
              throw "PR can't be automatically merged. Please rebase and retry."
            }
      - name: Show SHA (mergebale)
        run: |
          echo "${{ steps.prData1.outputs.ref }}"
      

      - name: React to comment - success or failure
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GHA_TEST_REPO }}
          script: |
            const { owner, repo } = context.issue;
            const content = process.env.JOB_STATUS === 'success' ? '+1' : '-1'
            await github.rest.reactions.createForIssueComment({ owner, repo, comment_id: context.payload.comment.id, content });

          
