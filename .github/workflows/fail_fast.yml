name: Fail fast

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:

  job1:
    uses: ./.github/workflows/wf_called_pause.yml
    with:
      pause: 5
      release_candidate: false
  
  job2:
    runs-on: ubuntu-latest
    steps:
      - name: Job 2
        run: |
          sleep 10
          exit 0
          
      - name: Cancelling parallel jobs
        if: failure()
        uses: andymckay/cancel-action@0.3
  
  job3:
    runs-on: ubuntu-latest
    steps:
      - name: Job 3
        run: |
          sleep 60
          exit 0
          
      - name: Cancelling parallel jobs
        if: failure()
        uses: andymckay/cancel-action@0.3
  
  
  get_results: 
    runs-on: ubuntu-latest
    needs: [ job1,job2, job3]
    outputs:
      rc_failed: ${{steps.prepare_status.outputs.rc_failed}}
    permissions:
      statuses: write 
    if: ${{ always() }}
    steps:          
      - name: Prepare result status
        shell: bash
        id: prepare_status
        env:
          context: ${{ toJSON(needs) }}
        run: |
          echo $context | jq --color-output .

          rc_failed=${{ contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')}}
          echo "RC failed?: $rc_failed"
          echo "rc_failed=$rc_failed" >> $GITHUB_OUTPUT

          if [ $rc_failed == 'true' ]; then
            echo "emoji=:redex:" >> $GITHUB_OUTPUT
          else
            echo "emoji=:green_heart:" >> $GITHUB_OUTPUT
          fi
          
  set_workflow_status:
    runs-on: ubuntu-latest
    needs: get_results
    if: ${{ always() }}
    steps:          
      - name: Set workflow_status
        shell: bash
        run: |
          if [[ ${{needs.get_results.outputs.rc_failed}} ]]; then
            exit 1
          fi
  
  context:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: JSON github
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github) }}
      - name: JSON env
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(env) }}
      - name: JSON vars
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(vars) }}
      - name: JSON job
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(job) }}
      - name: JSON steps
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(steps) }}
      - name: JSON runner
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(runner) }}
      - name: JSON secrets
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(secrets) }}
      - name: JSON needs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(needs) }}
      - name: JSON inputs
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(inputs) }}
      - name: JSON event
        run: |
          echo $context | jq --color-output .
        env:
          context: ${{ toJSON(github.event) }}
