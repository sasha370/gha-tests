name: PR Comments

on:
  issue_comment:
    types: [created]


jobs:
  triggerPrWorkflow:
    name: Trigger PR Workflow
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '@toptal-bot run') &&
      (
        contains(github.event.comment.body, 'required') ||
        contains(github.event.comment.body, 'default') ||
        contains(github.event.comment.body, 'contracts provider') ||
        contains(github.event.comment.body, 'contracts consumer') ||
        contains(github.event.comment.body, 'contracts pack') 
      )
    runs-on: ubuntu-latest
    steps:
      - name: Echo github event
        env:
          EVENT: '${{ toJson(github.event) }}'
        run: |
          echo "${{ env.set_status }}"
          echo $EVENT

      - id: prData
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            core.setOutput('ref', pr.head.ref)
            core.setOutput('merge_commit_sha', pr.merge_commit_sha)
            core.setOutput('head_sha', pr.head.sha)

      - name: View prData
        run: |
          echo "ref: ${{ steps.prData.outputs.ref }}"
          echo "merge_commit_sha: ${{ steps.prData.outputs.merge_commit_sha }}"
          echo "head_sha: ${{ steps.prData.outputs.head_sha}}"

      - uses: actions/checkout@v3
      - uses: AurorNZ/paths-filter@v3
        id: filter
        with:
          ref: ${{ steps.prData.outputs.ref }}
          filters: |
            backend:
              - '!README.md'
              - '!gems/**/*'
              - '!.github/**/*'
            frontend:
              - '.github/**/*.yml'
            docs:
              - 'docs/**/*'
              - '**/*.md'

      - name: Trigger Flows
        if: ${{ contains(github.event.comment.body, 'required') ||
          contains(github.event.comment.body, 'default') }}
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: Flows
          ref: ${{ steps.prData.outputs.ref }}
          inputs: '{ "sha": "${{ steps.prData.outputs.merge_commit_sha }}" }'

      - name: Check contracts necessity
        id: check_contracts_necessity
        if: ${{ contains(github.event.comment.body, 'contracts provider') ||
          contains(github.event.comment.body, 'contracts consumer') ||
          contains(github.event.comment.body, 'contracts pack') ||
          contains(github.event.comment.body, 'backend pact') ||
          contains(github.event.comment.body, 'default') ||
          contains(github.event.comment.body, 'mergecheck') }}
        shell: bash
        run: |
          if [[ "${{ github.event.comment.body }}" == *"contracts provider"* ]]; then
            conclusion="Run only provider contracts"
            echo "contracts_set=provider" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.comment.body }}" == *"contracts consumer"* ]]; then
            conclusion="Run only consumer contracts"
            echo "contracts_set=consumer" >> $GITHUB_OUTPUT
          else
            conclusion="Run all contracts"
            echo "contracts_set=all" >> $GITHUB_OUTPUT
          fi
          echo "Conclusion: $conclusion"

      - name: Trigger Contracts
        if: steps.check_contracts_necessity.conclusion != 'skipped'
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: Contracts
          ref: ${{ steps.prData.outputs.ref }}
          inputs: |
            { 
              "sha": "${{ steps.prData.outputs.merge_commit_sha }}",
              "ref_name": "${{ steps.prData.outputs.ref }}",
              "contracts_set": "${{ steps.check_contracts_necessity.outputs.contracts_set }}",
              "set_status": "true"
            }

      - name: React to comment - success or failure
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.issue;
            const content = process.env.JOB_STATUS === 'success' ? '+1' : '-1'
            await github.rest.reactions.createForIssueComment({ owner, repo, comment_id: context.payload.comment.id, content });
