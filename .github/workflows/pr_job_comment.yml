name: PR Comments

on:
  issue_comment:
    types: [created]

jobs:
  triggerPrWorkflow:
    name: Trigger PR Workflow
    if: >
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '@toptal-bot run') &&
      (
        contains(github.event.comment.body, 'required') ||
        contains(github.event.comment.body, 'default') 
      )
    runs-on: ubuntu-latest
    steps:
      - name: Echo github event
        env:
          EVENT: '${{ toJson(github.event) }}'
        run: echo $EVENT

      - id: prData
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: number });
            core.setOutput('ref', pr.head.ref)
            core.setOutput('merge_commit_sha', pr.merge_commit_sha)
            core.setOutput('head_sha', pr.head.sha)

      - name: View prData
        run: |
          echo "ref: ${{ steps.prData.outputs.ref }}"
          echo "merge_commit_sha: ${{ steps.prData.outputs.merge_commit_sha }}"
          echo "head_sha: ${{ steps.prData.outputs.head_sha}}"

      - name: Trigger Flows
        if: ${{ contains(github.event.comment.body, 'required') ||
          contains(github.event.comment.body, 'default') }}
        uses: benc-uk/workflow-dispatch@v1.2.2
        with:
          workflow: Flows
          ref: ${{ steps.prData.outputs.ref }}
          inputs: '{ "sha": "${{ steps.prData.outputs.merge_commit_sha }}" }'

#      - name: Trigger Jest
#        if: ${{ contains(github.event.comment.body, 'required') ||  contains(github.event.comment.body, 'jest') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Jest
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#          inputs: '{ "ref": "refs/pull/${{ github.event.issue.number }}/merge", "pull_request_id": "${{ github.event.issue.number }}" }'
#
#      - name: Trigger Cypress
#        if: ${{ contains(github.event.comment.body, 'required') ||  contains(github.event.comment.body, 'cypress') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Cypress
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#          inputs: '{ "ref": "${{ steps.prData.outputs.merge_commit_sha }}" }'
#
#      - name: Trigger Cucumber Features
#        if: ${{ contains(github.event.comment.body, 'features') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Cucumber Features
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#
#      - name: Trigger Required Updates Check
#        if: ${{ contains(github.event.comment.body, 'required') ||  contains(github.event.comment.body, 'check:updates') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Required Updates
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#
#      - name: Trigger Pact
#        if: ${{ contains(github.event.comment.body, 'required') ||  contains(github.event.comment.body, 'pact') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Pact
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#
#      - name: Trigger Billing alpha legacy package
#        if: ${{ contains(github.event.comment.body, 'package:billing:alpha-release') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Publish Billing alpha package
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#
#      - name: Trigger storybook temploy
#        if: ${{ contains(github.event.comment.body, 'storybook-temploy') }}
#        uses: benc-uk/workflow-dispatch@v1.2.2
#        with:
#          workflow: Deploy Storybook to Temploy
#          token: ${{ secrets.TOPTAL_DEVBOT_TOKEN }}
#          ref: ${{ steps.prData.outputs.ref }}
#          inputs: '{ "version": "${{ steps.prData.outputs.head_sha }}", "pr-number": "${{ github.event.issue.number }}"}'

      - name: React to comment - success or failure
        if: ${{ always() }}
        env:
          JOB_STATUS: ${{ job.status }}
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.issue;
            const content = process.env.JOB_STATUS === 'success' ? '+1' : '-1'
            await github.rest.reactions.createForIssueComment({ owner, repo, comment_id: context.payload.comment.id, content });
